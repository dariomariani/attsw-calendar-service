/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.6.1/userguide/java_library_plugin.html
 */

plugins {
    id "application"
    id "java"
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    //JaCoCo plugin for code coverage
    id 'jacoco'
    //Coveralls plugin to send JaCoCo files to coverall.io
    id "com.github.nbaztec.coveralls-jacoco" version "1.2.15"
    //Sonarqube for code analysis
    id "org.sonarqube" version "3.5.0.2730"
    //PITest mutation plugin
    id "info.solidsoft.pitest" version "1.9.0"
}

group 'calendar'
version = "0.0.2"

jar {
    manifest {
        attributes(
                'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': 'calendar.Program'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
    jcenter()
}

dependencies {
   	
   	//Hibernate
    implementation 'org.hibernate:hibernate-core:6.1.6.Final'
	//Different SQL Drivers
	implementation 'mysql:mysql-connector-java:8.0.21'
	implementation 'org.postgresql:postgresql:42.2.16'
	implementation 'com.h2database:h2:1.4.200'
    
    if (project.hasProperty("mysql")) {
        project.buildDir = 'build/mysql'
    }else if (project.hasProperty("psql")) {
        project.buildDir = 'build/postgresql'
    }

    // Use JUnit test framework
    testCompileOnly 'junit:junit:4.13'
    testImplementation 'org.mockito:mockito-core:3.12.4'
    // JUnit 5 required for testcontainers
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.8.1'
    
    
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['models/**','calendar/**'])
        }))
    }
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    testContainers {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    integrationTestImplementation.extendsFrom implementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly
    testContainersImplementation.extendsFrom implementation
    testContainersRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    integrationTestImplementation 'junit:junit:4.13'
    integrationTestRuntimeOnly 'org.mockito:mockito-core:3.12.4'
    integrationTestImplementation 'org.slf4j:slf4j-api:1.7.32'
    integrationTestImplementation 'org.slf4j:slf4j-simple:1.7.36'
    //testcontainer
    testContainersRuntimeOnly 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testContainersRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testContainersRuntimeOnly 'org.testcontainers:testcontainers:1.16.0'
    testContainersImplementation 'org.testcontainers:postgresql:1.16.0'
    testContainersImplementation 'org.testcontainers:mysql:1.16.0'
    testContainersImplementation 'org.testcontainers:junit-jupiter:1.17.6'
}

def integrationTest = tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test
}

def testContainers = tasks.register('testContainers', Test) {
    description = 'Runs containers tests.'
    group = 'verification'

    testClassesDirs = sourceSets.testContainers.output.classesDirs
    classpath = sourceSets.testContainers.runtimeClasspath
    shouldRunAfter integrationTest
    useJUnitPlatform()
}


tasks.named('check') { dependsOn(integrationTest) }
tasks.named('check') { dependsOn(testContainers) }

build.dependsOn 'pitest'

pitest {
    targetClasses = ['repository.*', 'services.*', 'utils.*']
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 100
}
